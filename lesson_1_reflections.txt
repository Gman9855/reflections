How did viewing a diff between two versions of a file help you see the bug that was introduced?
I was able to pinpoint only the changes made, and was easily able to find that the bug was a misspelled word.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
I would be able to go back and be able to review old code i wrote, and possibly revert back to it if i wanted.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
Cons would be user errors, like forgetting to commit, or make too big or small of a commit.  Pros would be that the user has full control and by having more thoughtful commits it can make your work a lot more organized and easy to work with.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Saving multiple files in one commit is useful when all files are connected/related to each other in some way.  Treating each file separately like Google Docs does could be useful to keep things simple and easy to understand.

How can you use the commands git log and git diff to view the history of files?
git log will show you all your commits, and you can use git diff to compare changes between commits.

How might using version control make you more confident to make changes that could break something?
I can easily revert back to the previous working version if anything goes wrong.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use it for making apps.  It will be helpful for tracking changes.
